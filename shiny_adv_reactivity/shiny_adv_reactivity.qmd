---
title: "Wrangling data with dplyr"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---
```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE, tibble.max_extra_cols = 6, tibble.width = 60)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = "center", dpi = 320)
library(tidyverse)
```


```{r, out.height="90%", out.width="90%", echo = FALSE}
knitr::include_graphics("dplyr_wrangling.png")
```
::: {.column width="50%"}
Art by Allison Horst
:::

##

## The main verbs of `dplyr` {background-image="http://hexb.in/hexagons/dplyr.png" background-position="90% 10%"}

```{r transform, include=FALSE}
library(tidyverse)
library(gapminder)
```

## The main verbs of `dplyr`

## `select()`

## `filter()`

## `mutate()`

## `arrange()`

## `summarize()`

## `group_by()`

##

## The main verbs of `dplyr`

## **`select()`** = *Subset columns (variables)*

## `filter()`

## `mutate()`

## `arrange()`

## `summarize()`

## `group_by()`


##

## `select()`

```{r, eval=FALSE}
select(<DATA>, <VARIABLES>)
```

##

## `select()`

```{r, eval=FALSE}
select(<DATA>, <VARIABLES>)
```

```{r, highlight.output = c(2, 14)} 
diamonds
```

##

```{r, out.height="100%", out.width="100%", echo = FALSE}
knitr::include_graphics("new_data_alert_diamonds.png")
```

##

## `select()`

```{r, eval = FALSE} 
select(diamonds, carat, cut, color, clarity) #<<
```

##

## `select()`

```{r, highlight.output = 2} 
select(diamonds, carat, cut, color, clarity)
```

##

## `select()`

```{r, eval=FALSE} 
select(diamonds, carat, cut, color, clarity)

select(diamonds, carat:clarity)

select(diamonds, 1:4)

select(diamonds, starts_with("c"))

?select_helpers
```

##

## gapminder

```{r}
library(gapminder)
gapminder
```

##

```{r, out.height="100%", out.width="100%", echo = FALSE}
knitr::include_graphics("new_data_alert_gapminder.png")
```

##

## Your turn 1

## Alter the code to select just the `pop` column:

```{r, eval=FALSE}
select(gapminder, year, lifeExp)
```

##

## Your Turn 1

```{r}
select(gapminder, pop)
```

##

## Show of Hands

#### Which of these is NOT a way to select the `country` and `continent` columns together?

```{r, eval=FALSE}
select(gapminder, -c(year, lifeExp, pop, gdpPercap))

select(gapminder, country:continent)

select(gapminder, starts_with("c"))

select(gapminder, ends_with("t"))
```

##

## Show of Hands

#### Which of these is NOT a way to select the `country` and `continent` columns together?

```{r, highlight.output = 2}
select(gapminder, ends_with("t"))
```

##

## The main verbs of `dplyr`

## `select()`

## **`filter()`** = *Subset rows by value*

## `mutate()`

## `arrange()`

## `summarize()`

## `group_by()`

##

## `filter()`

```{r, eval=FALSE}
filter(<DATA>, <PREDICATES>)
```

. . .

### *Predicates*: **`TRUE`** or **`FALSE`** statements

##

## `filter()`

```{r, eval=FALSE}
filter(<DATA>, <PREDICATES>)
```

### ~~Predicates: `TRUE` or `FALSE` statements~~

### *Comparisons*: **`>`**, **`>=`**, **`<`**, **`<=`**, **`!=`** (not equal), and **`==`** (equal).

##

## `filter()`

```{r, eval=FALSE}
filter(<DATA>, <PREDICATES>)
```

### ~~Predicates: `TRUE` or `FALSE` statements~~

### ~~Comparisons: `>`, `>=`, `<`, `<=`, `!=` (not equal), and `==` (equal).~~

### *Operators*: **`&`** is "and", **`|`** is "or", and **`!`** is "not"

##

## `filter()`

```{r, eval=FALSE}
filter(<DATA>, <PREDICATES>)
```

### ~~Predicates: `TRUE` or `FALSE` statements~~

### ~~Comparisons: `>`, `>=`, `<`, `<=`, `!=` (not equal), and `==` (equal).~~

### ~~Operators: `&` is "and", `|` is "or", and `!` is "not"~~

### **`%in%`**

. . .

```{r} 
"a" %in% c("a", "b", "c")
```

##

## `filter()`

```{r, eval = FALSE} 
filter(diamonds, cut == "Ideal", carat > 3)
```

##

## `filter()`

```{r, highlight.output = c(1, 4:7)} 
filter(diamonds, cut == "Ideal", carat > 3)
```

##

## Your turn 2

### Show:

### All of the rows where `pop` is greater than or equal to 100000  
### All of the rows for El Salvador  
### All of the rows that have a missing value for `year`  (no need to edit this code)

##

## Your turn 2

### Show:

### All of the rows where `pop` is greater than or equal to 100000  
### All of the rows for El Salvador  
### All of the rows that have a missing value for `year`  (no need to edit this code)

```{r, eval=FALSE}
filter(gapminder, pop >= 100000)
filter(gapminder, country == "El Salvador")
filter(gapminder, is.na(year))
```

##

## `filter()`

```{r}
filter(diamonds, cut == "Ideal" | cut == "Very Good", carat > 3)
```

##

## Your turn 3

### Use Boolean operators to alter the code below to return only the rows that contain:

### El Salvador  
### Countries that had populations over 100000 in 1960 or earlier

```{r, eval=FALSE}
filter(gapminder, country == "El Salvador" | country == "Oman")
filter(______, _______)
```

##

## Your turn 3

### Use Boolean operators to alter the code below to return only the rows that contain:

### El Salvador  
### Countries that had populations over 100000 in 1960 or earlier

```{r, eval=FALSE}
filter(gapminder, country == "El Salvador")
filter(gapminder, pop > 100000, year <= 1960)
```

##

## The main verbs of `dplyr`

## `select()`

## `filter()`

## **`mutate()`** = *Change or add a variable*

## `arrange()`

## `summarize()`

## `group_by()`
##

## `mutate()`

```{r, eval=FALSE}
mutate(<DATA>, <NAME> = <FUNCTION>)
```

##

## `mutate()`

```{r, eval = FALSE}
mutate(diamonds, log_price = log(price), log_pricesq = log_price^2)
```

##

## `mutate()`

```{r, highlight.output = 15}
mutate(diamonds, log_price = log(price), log_pricesq = log_price^2)
```

##

## The main verbs of `dplyr`

## `select()`

## `filter()`

## `mutate()`

## **`arrange()`** = *Sort the data set*

## `summarize()`

## `group_by()`
##

## `arrange()`

```{r, eval=FALSE}
arrange(<DATA>, <SORTING VARIABLE>)
```

##

## `arrange()`

```{r}
arrange(diamonds, price)
```

##

## `arrange()`

```{r}
arrange(diamonds, cut, price)
```

##

## `desc()`

```{r}
arrange(diamonds, cut, desc(price))
```

##

## Your turn 4

## Arrange gapminder by `year`. Add `lifeExp` as a second (tie breaking) variable to arrange on. 

## Which country had the lowest life expectancy in 1952?

##

## Your turn 4

```{r}
arrange(gapminder, year, lifeExp)
```

##

## Your turn 5

## Use `desc()` to find the country with the highest `gdpPercap`.

##

## Your turn 5

```{r}
arrange(gapminder, desc(gdpPercap))
```

# Detour: The Pipe {background-color="#23373B"}

## **`|>`**
### Passes the result on one function to another function

## Detour: The Pipe

```{r, eval=FALSE}
diamonds <- arrange(diamonds, price)
diamonds <- filter(diamonds, price > 300)
diamonds <- mutate(diamonds, log_price = log(price))

diamonds
```

##

## Detour: The Pipe

```{r, eval=FALSE}
diamonds <- diamonds |> 
  arrange(price) %>% 
  filter(price > 300) %>% 
  mutate(log_price = log(price))

diamonds
```

##

## Keyboard shortcuts


## Insert *`<-`* with **`alt/opt + -`**

. . .

## Insert *`%>%`* with **`ctrl/cmd + shift + m`**


##

## Your turn 6

### Use `%>%` to write a sequence of functions that: 

### 1. Filter only countries that are in the continent of Oceania.
### 2. Select the `country`, `year` and `lifeExp` columns  
### 3. Arrange the results so that the highest life expetency is at the top.

##

## Your turn 6

```{r}
gapminder %>% 
  filter(continent == "Oceania") %>% 
  select(country, year, lifeExp) %>% 
  arrange(desc(lifeExp))
```

##

## Challenge!

### 1. Import the diabetes data from the importing data. A copy of the CSV file is available in this folder.
### 2. Add the variable `bmi` to the data set using height and weight using the formula: `(weight / height^2) * 703`
### 3. Select just `id`, `glyhb`, and the new variable you created.
### 4. Filter rows that have BMI > 35. How many rows and columns are in your new data set?

##

```{r, eval=FALSE}
diabetes <- read_csv("diabetes.csv")
diabetes %>% 
  mutate(bmi = (weight / height^2) * 703) %>% 
  select(id, glyhb, bmi) %>% 
  filter(bmi > 35)
```
##

```{r, highlight.output=1}
diabetes <- read_csv("diabetes.csv")
diabetes %>% 
  mutate(bmi = (weight / height^2) * 703) %>% 
  select(id, glyhb, bmi) %>% 
  filter(bmi > 35)
```

##

## The main verbs of `dplyr`

## `select()`

## `filter()`

## `mutate()`

## `arrange()`

## **`summarize()`** = *Summarize the data*

## **`group_by()`** = *Group the data*
##

## `summarize()`

```{r, eval=FALSE}
summarize(<DATA>, <NAME> = <FUNCTION>)
```

##

## `summarize()`

```{r}
summarize(diamonds, n = n(), mean_price = mean(price))
```

##

## Your turn 7

## Use `summarise()` to compute three statistics about the gapminder data set:

### 1. The first (`min()`) year in the data
### 2. The last (`max()`) year in the data  
### 3. The total number of observations (`n()`) and the total number of unique countries in the data (`n_distinct()`)

##

## Your turn 7

```{r}
gapminder %>% 
  summarize(
    first = min(year), 
    last = max(year), 
    n = n(), 
    n_countries = n_distinct(country)
  )
```

##

## `group_by()`

```{r, eval=FALSE}
group_by(<DATA>, <VARIABLE>)
```

##

## `group_by()`

```{r, eval = FALSE}
diamonds %>% 
  group_by(cut)
```

##

## `group_by()`

```{r, highlight.output = 2}
diamonds %>% 
  group_by(cut)
```

##

## `group_by()`

```{r, eval = FALSE}
diamonds %>% 
  group_by(cut) %>% #<<
  summarize(n = n(), mean_price = mean(price)) #<<
```

##

## `group_by()`

```{r}
diamonds %>% 
  group_by(cut) %>% 
  summarize(n = n(), mean_price = mean(price))
```

##

## `group_by()`

```{r, eval = FALSE}
diamonds %>% 
  group_by(cut) %>% 
  mutate(n = n(), mean_price = mean(price))
```

##

## `group_by()`

```{r, highlight.output = 1:2}
diamonds %>% 
  group_by(cut) %>% 
  mutate(n = n(), mean_price = mean(price))
```

##

## Your turn 8

## Extract the rows where `continent == "Europe"`. Then use `group_by()` to group by country. Finally, use `summarize()` to compute:

### 1. The total number of observations for each country in Europe
### 2. The lowest observed life expectancy for each country 

##

## Your turn 8

```{r}
gapminder %>% 
  filter(continent == "Europe") %>% 
  group_by(country) %>% 
  summarize(n = n(), min_le = min(lifeExp))
```

##

## Your turn 9

### Use grouping to calculate the mean life expectancy for each continent and year. Call the mean life expectancy variable `mean_le`. Plot the life expectancy over time (no need to change the plot code).

```{r, eval = FALSE}
gapminder %>% 
  __________ %>% 
  __________ %>% 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
    geom_line() + 
    scale_color_manual(values = continent_colors)
```

##

## Your turn 9

### Use grouping to calculate the mean life expectancy for each continent and year. Call the mean life expectancy variable `mean_le`. Plot the life expectancy over time (no need to change the plot code).

```{r, eval = FALSE}
gapminder %>% 
  group_by(continent, year) %>% 
  summarize(mean_le = mean(lifeExp)) %>% 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
    geom_line() + 
    scale_color_manual(values = continent_colors)
```

##


```{r, echo = FALSE, fig.height=4.5}
gapminder %>% 
  group_by(continent, year) %>% 
  summarize(mean_le = mean(lifeExp)) %>% 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
    geom_line() + 
    scale_color_manual(values = continent_colors)
```

##

## `mutate_if/all/at()`
## `summarize_if/all/at()`

. . .

### ... etc!

##

## Joining data

### Use `left_join()`, `right_join()`, `full_join()`, or `inner_join()` to join datasets
### Use `semi_join()` or `anti_join()` to filter datasets against each other

##

{background-color="#23373B"}

# Resources
## [R for Data Science](https://r4ds.hadley.nz/): A comprehensive but friendly introduction to the tidyverse. Free online.
### [Posit Recipes](https://posit.cloud/learn/recipes): Common code patterns in R (with some comparisons to SAS)
