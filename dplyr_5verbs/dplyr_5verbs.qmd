---
title: "Wrangling data with dplyr"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)
library(tidyverse)
library(gapminder)
```

```{r}
#| label: dplyr_wrangling
#| out.height: 90%
#| out.width: 90%
#| echo: false
knitr::include_graphics("img/dplyr_wrangling.png")
```

Art by Allison Horst

## The main verbs of `dplyr`

![](img/dplyr.png){.absolute top=0 right=0 width=140}

### `select()`

### `filter()`

### `mutate()`

### `arrange()`

### `summarize()`

### `group_by()`

## The main verbs of `dplyr`

### **`select()`** = *Subset columns (variables)*

### `filter()`

### `mutate()`

### `arrange()`

### `summarize()`

### `group_by()`

## `select()`

```{r}
#| label: select-concept-map
#| eval: false
select(<DATA>, <VARIABLES>)
```

## `select()`

```{r} 
#| label: select-concept-map-highlight-01
#| highlight.output: !expr c(2, 14)
diamonds
```

---

```{r}
#| label: new_data_alert_diamonds
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_diamonds.png")
```

## `select()`

```{r} 
#| label: select-example-01
#| eval: false
select(diamonds, carat, cut, color, clarity)
```

## `select()`

```{r} 
#| label: select-example-01-highlight
#| highlight.output: 2.0
select(diamonds, carat, cut, color, clarity)
```

## `select()`

```{r} 
#| label: select-helpers-example
#| eval: false
select(diamonds, carat, cut, color, clarity)
select(diamonds, carat:clarity)
select(diamonds, 1:4)
select(diamonds, starts_with("c"))
?select_helpers
```

## gapminder

```{r}
#| label: gapminder-package
#| output-location: fragment
library(gapminder)
gapminder
```

---

```{r}
#| label: new_data_alert_gapminder
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_gapminder.png")
```

---

## *Your Turn 1*

### Alter the code to select just the `pop` column:

```{r}
#| label: select-your-turn-01
#| eval: false
select(gapminder, year, lifeExp)
```

## *Your Turn 1*

```{r}
#| label: select-your-turn-output
select(gapminder, pop)
```

## *Make a prediction*

### Which of these is NOT a way to select the `country` and `continent` columns together?

```{r}
#| label: select-show-of-hands-01
#| eval: false
select(gapminder, -c(year, lifeExp, pop, gdpPercap))

select(gapminder, country:continent)

select(gapminder, starts_with("c"))

select(gapminder, ends_with("t"))
```

## *Make a prediction*

### Which of these is NOT a way to select the `country` and `continent` columns together?

```{r}
#| label: select-show-of-hands-highlight
#| highlight.output: 2.0
select(gapminder, ends_with("t"))
```

## The main verbs of `dplyr`

### `select()`

### **`filter()`** = *Subset rows by value*

### `mutate()`

### `arrange()`

### `summarize()`

### `group_by()`

## `filter()`

```{r}
#| label: filter-concept-map
#| eval: false
filter(<DATA>, <PREDICATES>)
```

. . .

**Predicates**: `TRUE` or `FALSE` statements

. . .

**Comparisons**: `>`, `>=`, `<`, `<=`, `!=` (not equal), and `==` (equal).

. . .

**Operators**: `&` is "and", `|` is "or", and `!` is "not"

. . .

**`%in%`**

. . .

```{r} 
#| label: filter-in-example
"a" %in% c("a", "b", "c")
```

## `filter()`

```{r} 
#| label: filter-equal-example-01
#| output-location: fragment
filter(diamonds, cut == "Ideal", carat > 3)
```

---

## *Your turn 2*

### Show:

### All of the rows where `pop` is greater than or equal to 100000  
### All of the rows for El Salvador  
### All of the rows that have a missing value for `year`  (no need to edit this code)

## *Your turn 2*

### Show:

### All of the rows where `pop` is greater than or equal to 100000  
### All of the rows for El Salvador  
### All of the rows that have a missing value for `year`  (no need to edit this code)

```{r}
#| label: filter-your-turn-02-output
#| eval: false
filter(gapminder, pop >= 100000)
filter(gapminder, country == "El Salvador")
filter(gapminder, is.na(year))
```

## `filter()`

```{r}
#| label: filter-or-example
filter(diamonds, cut == "Ideal" | cut == "Very Good", carat > 3)
```

## *Your turn 3*

### Use Boolean operators to alter the code below to return only the rows that contain:

### El Salvador  
### Countries that had populations over 100000 in 1960 or earlier

```{r}
#| label: filter-your-turn-03
#| eval: false
filter(gapminder, country == "El Salvador" | country == "Oman")
filter(______, _______)
```

## *Your turn 3*

### Use Boolean operators to alter the code below to return only the rows that contain:

### El Salvador  
### Countries that had populations over 100000 in 1960 or earlier

```{r}
#| label: filter-your-turn-03-output
#| eval: false
filter(gapminder, country == "El Salvador")
filter(gapminder, pop > 100000, year <= 1960)
```

## The main verbs of `dplyr`

### `select()`

### `filter()`

### **`mutate()`** = *Change or add a variable*

### `arrange()`

### `summarize()`

### `group_by()`

## `mutate()`

```{r}
#| label: mutate-concept-map
#| eval: false
mutate(<DATA>, <NAME> = <FUNCTION>)
```

## `mutate()`

```{r}
#| label: mutate-example
#| output-location: slide
#| code-line-numbers: "|3|4"
mutate(
  diamonds, 
  log_price = log(price), 
  log_pricesq = log_price^2
)
```

## The main verbs of `dplyr`

### `select()`

### `filter()`

### `mutate()`

### **`arrange()`** = *Sort the data set*

### `summarize()`

### `group_by()`

## `arrange()`

```{r}
#| label: arrange-concept-map
#| eval: false
arrange(<DATA>, <SORTING VARIABLE>)
```

## `arrange()`

```{r}
#| label: arrange-example-01
arrange(diamonds, price)
```

## `arrange()`

```{r}
#| label: arrange-example-02
arrange(diamonds, cut, price)
```

## `desc()`

```{r}
#| label: arrange-desc-example-01
arrange(diamonds, cut, desc(price))
```

## *Your turn 4*

### Arrange gapminder by `year`. Add `lifeExp` as a second (tie breaking) variable to arrange on. 

### Which country had the lowest life expectancy in 1952?

## *Your turn 4*

```{r}
#| label: arrange-your-turn-04
arrange(gapminder, year, lifeExp)
```

## *Your turn 5*

### Use `desc()` to find the country with the highest `gdpPercap`.

## *Your turn 5*

```{r}
#| label: arrange-your-turn-05
arrange(gapminder, desc(gdpPercap))
```

# Detour: The Pipe `|>` {background-color="#23373B"}

## Detour: The Pipe

```{r}
#| label: withoout-pipes
#| eval: false
diamonds <- arrange(diamonds, price)
diamonds <- filter(diamonds, price > 300)
diamonds <- mutate(diamonds, log_price = log(price))

diamonds
```

## Detour: The Pipe

```{r}
#| label: with-pipes
#| eval: false
diamonds <- diamonds |> 
  arrange(price) |> 
  filter(price > 300) |> 
  mutate(log_price = log(price))

diamonds
```

. . .

::: {.huge}
*Passes the result of one function to another function*
:::

## Keyboard shortcuts {.huge}

. . .

Insert `<-` with `alt/opt + -`

. . .

Insert `|>` with `ctrl/cmd + shift + m`

## Keyboard shortcuts {.large}

Tools > Global Options > Code

```{r}
#| echo: false
knitr::include_graphics("img/native-pipe.png")
```

## The magrittr pipe {background-color="#23373B"}

### In the wild, you'll see `%>%` a lot. This is the old pipe prior to when R had a built-in one. Either pipe is fine, but we'll use the so-called native pipe `|>`
### See [R for Data Science](https://r4ds.hadley.nz/workflow-pipes.html#magrittr-and-the-pipe) for more info

## *Your turn 6*

### Use `|>` to write a sequence of functions that: 

### Filter only countries that are in the continent of Oceania.
### Select the `country`, `year` and `lifeExp` columns  
### Arrange the results so that the highest life expectancy is at the top.

## *Your turn 6*

```{r}
#| label: filter-select-arrange-your-turn-06
gapminder |> 
  filter(continent == "Oceania") |> 
  select(country, year, lifeExp) |> 
  arrange(desc(lifeExp))
```

## *Challenge!*

### 1. Import the diabetes data from the importing data. A copy of the CSV file is available in this folder.
### 2. Add the variable `bmi` to the data set using height and weight using the formula: `(weight / height^2) * 703`
### 3. Select just `id`, `glyhb`, and the new variable you created.
### 4. Filter rows that have BMI > 35. How many rows and columns are in your new data set?

---

```{r}
#| label: mutate-select-filter-challenge
#| output-location: fragment
diabetes <- read_csv("diabetes.csv")
diabetes |> 
  mutate(bmi = (weight / height^2) * 703) |> 
  select(id, glyhb, bmi) |> 
  filter(bmi > 35)
```

---

## The main verbs of `dplyr`

### `select()`

### `filter()`

### `mutate()`

### `arrange()`

### **`summarize()`** = *Summarize the data*

### **`group_by()`** = *Group the data*

## `summarize()`

```{r}
#| label: summarize-concept-map
#| eval: false
summarize(<DATA>, <NAME> = <FUNCTION>)
```

## `summarize()`

```{r}
#| label: summarize-example-01
summarize(diamonds, n = n(), mean_price = mean(price))
```

## *Your turn 7*

### Use `summarise()` to compute these statistics about the gapminder data set:

#### 1. The first (`min()`) year in the data
#### 2. The last (`max()`) year in the data  
#### 3. The total number of observations (`n()`) and the total number of unique countries in the data (`n_distinct()`)

## *Your turn 7*

```{r}
#| label: summarize-your-turn-07
gapminder |> 
  summarize(
    first = min(year), 
    last = max(year), 
    n = n(), 
    n_countries = n_distinct(country)
  )
```

## `group_by()`

```{r}
#| label: group-by-concept-map
#| eval: false
group_by(<DATA>, <VARIABLE>)
```

## `group_by()`

```{r}
#| label: group-by-example-01
#| output-location: fragment
diamonds |> 
  group_by(cut)
```

## `group_by()`

```{r}
#| label: group-by-summarize-example-01
#| code-line-numbers: "|2,3"
#| output-location: fragment
diamonds |> 
  group_by(cut) |> 
  summarize(n = n(), mean_price = mean(price)) 
```

## *Your turn 8*

### Extract the rows where `continent == "Europe"`. Then use `group_by()` to group by country. Finally, use `summarize()` to compute:

### 1. The total number of observations for each country in Europe
### 2. The lowest observed life expectancy for each country

## *Your turn 8*

```{r}
#| label: filter-group-by-summarize-your-turn-08
gapminder |> 
  filter(continent == "Europe") |> 
  group_by(country) |> 
  summarize(n = n(), min_le = min(lifeExp))
```

## *Your turn 9*

### Use grouping to calculate the mean life expectancy for each continent and year. Call the mean life expectancy variable `mean_le`. Plot the life expectancy over time (no need to change the plot code).

```{r}
#| label: filter-group-by-summarize-your-turn-09
#| eval: false
gapminder |> 
  __________ |> 
  __________ |> 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
  geom_line() + 
  scale_color_manual(values = continent_colors)
```

## *Your turn 9*

### Use grouping to calculate the mean life expectancy for each continent and year. Call the mean life expectancy variable `mean_le`. Plot the life expectancy over time (no need to change the plot code).

```{r}
#| label: filter-group-by-summarize-your-turn-09-answer
#| eval: false
gapminder |> 
  group_by(continent, year) |> 
  summarize(mean_le = mean(lifeExp)) |> 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
  geom_line() + 
  scale_color_manual(values = continent_colors)
```

---

```{r}
#| label: filter-group-by-summarize-your-turn-09-output
#| echo: false
#| fig.height: 4.5
gapminder |> 
  group_by(continent, year) |> 
  summarize(mean_le = mean(lifeExp)) |> 
  ggplot(aes(x = year, y = mean_le, col = continent)) +
  geom_line() + 
  scale_color_manual(values = continent_colors)
```

## Joining data

### Use `left_join()`, `right_join()`, `full_join()`, or `inner_join()` to join datasets
### Use `semi_join()` or `anti_join()` to filter datasets against each other

## Resources {background-color="#23373B"}
### [R for Data Science](https://r4ds.hadley.nz/): A comprehensive but friendly introduction to the tidyverse. Free online.
### [Posit Recipes](https://posit.cloud/learn/recipes): Common code patterns in R (with some comparisons to SAS)
