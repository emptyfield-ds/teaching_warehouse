---
title: "targets: Whole Game"
format: html
---

For this set of exercises, we'll work through a targets pipeline to run an analysis and generate a Quarto report in `whole_game.qmd`. 
Read that file for a little information on our data and analysis!
Open `_targets.R`---our file to manage the targets pipeline---to get started.

```{r}
#| label: setup
library(targets)
# this loads the `copy_targets_template()` helper function we'll use in this exercise
source("copy_targets_template.R")
```


## Your Turn 1

Run this code to make a fresh copy of `_targets.R`:

```{r}
# this function is defined in the `setup` chunk above!
copy_targets_template("your_turn_1.R")
```

1.  Open `_targets.R` and take a look at the structure of the file. targets requires this file to run! You can also open this file at the console with `tar_edit()`.
2.  Add "tidyverse" to the `packages` argument of `tar_option_set()`
3.  We're going to add two targets to `tar_plan()`. First, add `tar_file(forest_file, "data/forest.csv")`. This creates a new target called `forest_file`: `tar_file()` essentially tells targets that "data/forest.csv" is a file we should keep an eye on.
4.  Next, add `forest = read_csv(forest_file)`
5.  Then, run `tar_visnetwork()` in the console (don't include this in your script). What do you see?
6.  Run `tar_make()` in the console (not in your script)
7.  In the console, run `tar_read(forest)`. What are you seeing?

## Your Turn 2

Something not quite working from the last exercise? Run this code to update `_targets.R` and catch up:

```{r}
copy_targets_template("your_turn_2.R")
```

1.  Open `R/functions.R` and take a look at the first function, `map_2010_forest_conversion()`. This function takes a dataframe---forest---and generates a map of forest conversion in 2010.
2.  Let's add this map to our targets plan. First, add a few more packages that we need for this function to the `packages` argument of `tar_option_set()`: "maps", "sf", "scico".
3.  We also need to load our custom functions. Add `source("R/functions.R")` after `tar_option_set()`.
3.  Add `forest_map = map_2010_forest_conversion(forest)` as a target
4.  Run `tar_visnetwork()` in the console. What's changed? Why are you seeing other functions beyond what you added to the plan?
5.  Run `tar_make()` in the console.
6.  Run `tar_read(forest_map)` in the console.

## Your Turn 3

Something not quite working from the last exercise? Run this code to update `_targets.R` and catch up:

```{r}
copy_targets_template("your_turn_3.R")
```

1.  The next function in `R/functions.R` , `barplot_top_10_change()`, takes `forest` and returns a barplot of the 10 countries with the highest absolute change in 2010. Add this function as a target called `top10_barplot`.
2.  Take a look with `tar_visnetwork()`, then run `tar_make()`.
3.  Use `tar_read()` to look at the the bar plot

## Your Turn 4

Something not quite working from the last exercise? Run this code to update `_targets.R` and catch up:

```{r}
copy_targets_template("your_turn_4.R")
```

1.  Add patchwork to the packages argument at the top of `_targets.R`
2.  Remove the `top10_barplot` target and change the `forest_map` target to use `plot_top_change_2010(forest)` instead.
3.  Run `tar_visnetwork()`, `tar_make()`, and `tar_read()`
4.  We just got rid of `top10_barplot`, but if you run `tar_read(top10_barplot)`, you'll see it's still in our cache. Run `tar_prune()` to remove any targets that are no longer part of the pipeline. Confirm that it's gone with `tar_read()`.

## Your Turn 5

Something not quite working from the last exercise? Run this code to update `_targets.R` and catch up:

```{r}
copy_targets_template("your_turn_5.R")
```

1.  One at a time, running `tar_visnetwork()` , `tar_make()`, and `tar_read()` at each step, add five new targets:

    -   Add "data/brazil_loss.csv" as a file target called `brazil_loss_file`

    -   Read `brazil_loss_file` using `read_csv()`.
        Call the target `brazil_loss`

    -   Add a new target called `brazil_causes_2010` using `clean_2010_causes()` on `brazil_loss`

    -   Add a new target called `brazil_causes_table` using `table_brazil_causes()` on `brazil_causes_2010`. 
        For this target, we also need to add "gt" to the packages in `tar_option_set()` since we use the gt package in `table_brazil_causes()`.

    -   Add a new target called `brazil_causes_hist` using `plot_cause_hist()` on `brazil_loss`. 
        Note that when you look at ggplots, ggplot2 actually re-builds the plot on the fly. 
        That means you may need to load the packages and functions we're using in your local environment, as well.
        You can easily load everything set up in `_targets.R` by running `tar_load_globals()` in the console.

By the way, you can quickly load all of the targets in your pipeline into your global environment by running  `tar_load(everything())` in the console.

## Your Turn 6

Something not quite working from the last exercise? Run this code to update `_targets.R` and catch up:

```{r}
copy_targets_template("your_turn_6.R")
```

1.  Open `whole_game.qmd` and take a look. This is a report that uses the targets we created in our pipeline.
2.  Use `tar_load()` to load `forest` and `brazil_causes_2010` in the `setup` chunk. This time, you will include `tar_load()` directly in your code!
3.  Use `tar_read()` in the following chunks: `forest-map`, `causes-table`, and `causes-hist`.
4.  Add the report to your pipeline in `_targets.R`. The format for for rendering a Quarto file is `tar_quarto(name_of_target, "name_of_report.qmd")`.
5.  Run `tar_visnetwork()` and `tar_make()`. Open your rendered report from the Files pane.

## Your Turn 7

```{r}
copy_targets_template("your_turn_7.R")
```

1.  Run `tar_destroy()` in the console
2.  Run `tar_visnetwork()`. What's different?
3.  Run `tar_make()`
4.  Take a look at your rendered report

### Stretch goal: parallelize 

targets comes with automatic parallelization. Since it knows the relationships between targets, it also knows what can be run at the same time. Doing so is easy with the crew package. Let's say we wanted to use 4 cores. In `_targets.R`, first load the crew package. Then, add `crew_controller_local()` to the `controller` argument of `tar_option_set()`.

```{r}
library(crew)
n_cores <- 4
tar_option_set(
  # other arguments to tar_option_set()
  controller = crew_controller_local(workers = n_cores)
)
```

That's it! Now, try running `tar_destroy()` and `tar_make()` with parallelization.


