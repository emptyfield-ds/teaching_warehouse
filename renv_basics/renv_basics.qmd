---
title: "Reproducing package environments"
subtitle: "using renv to lock packages"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(htmltools.dir.version = FALSE, tibble.max_extra_cols = 6, tibble.width = 60)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = "center", dpi = 320)
library(tidyverse)
library(gapminder)
library(here)
```

## Once upon a time (*6 months ago*), a hero (*you*) wrote some code

--

```{r}
#| eval: false
add_rownames(data, var = "rowname")
```

--

### **But then!**

--

### Updates were made to the [`dplyr` package:](https://dplyr.tidyverse.org/news/index.html#deprecated)

```
Warning message:
`add_rownames()` was deprecated in dplyr 1.0.0.
Please use `tibble::rownames_to_column()` instead.
```

## *renv* {background-image="img/renv.svg" background-position="93% 10%" background-size="220px 220px"}

<br><br><br>

--

## `renv` is designed to improve *project-level reproducibility *

--

## *records* and *restores* the packages used in a project

--

## Successor to [packrat](https://rstudio.github.io/packrat/)

## How does renv help? {.dark-slide}

1. Each project gets it's own library (*isolated*)

--

2. The project library can be shipped with a self-contained lockfile, `renv.lock` (*portable*)

--

3. `renv.lock` can be restored with `renv::restore()` (*reproducible*)

---

## `renv::init()`

### Creates local renv environment; *caches* packages.

---

## `renv::init()`

### ~~Creates local renv environment; caches packages.~~

### Documents packages in *`renv.lock`* 

```{r}
#| label: renv-init-pkgs-02.png
#| echo: false
#| out.width: 53%
#| fig.align: center
knitr::include_graphics("img/renv-init-pkgs-02.png")
```

---

# `renv::dependencies()`

--

## `library(ggplot2)`
## `targets::tar_target()`
## `require(dplyr)`
## `requireNamespace("devtools")`

---

# `renv::dependencies()`

## ~~`library(`~~**`ggplot2`**~~`)`~~
## **`targets`**~~`::tar_target()`~~
## ~~`require(`~~**`dplyr`**~~`)`~~
## ~~`requireNamespace("`~~**`devtools`**~~`")`~~

---

## Your Turn 1

.large[
#### Create a new project 
#### Create a new file called `plot.R` In that file, load `ggplot2` and create a plot with `quickplot(mpg$displ)`.
#### What packages does your project depend on? Make a prediction, then run `renv::dependencies()` in the console (not in `plot.R`!) to see if you were right.
#### In the console, initiate a `renv` environment with `renv::init()`
#### Open the file called `renv.lock`. What is this information?
]

---

## Your Turn 1

### In RStudio: File > New Project > 'my-new-project'

```{r}
#| label: create-project.png
#| echo: false
#| out.width: 90%
knitr::include_graphics("img/create-project.png")
```

---

## Your Turn 1

### Or with usethis

```{r}
#| eval: false
usethis::create_project("~/Projects/my-new-project") #<<

✓ Creating '~/Projects/my-new-project/'
✓ Setting active project to '~/Projects/my-new-project'
✓ Creating 'R/'
✓ Writing 'my-new-project.Rproj'
✓ Adding '.Rproj.user' to '.gitignore'
✓ Opening '~/Projects/my-new-project/' in new RStudio session
✓ Setting active project to 'my-last-project'
```

---

## Your Turn 1

```{r}
#| label: plot-dot-r-file
#| echo: false
#| out.width: 100%
knitr::include_graphics("img/plot-dot-r-file-01.png")
```

---

## Your Turn 1

```{r}
#| label: renv-dependencies-01
#| echo: false
#| out.width: 100%
knitr::include_graphics("img/renv-dependencies-01.png")
```

---

## Your Turn 1


```{r}
#| label: renv-init-01.png
#| echo: false
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/renv-init-01.png")
```

---

## Your Turn 1

:::: {.columns}

::: {.column width="50%"}
### Packages in project library
:::

::: {.column width="50%"}
```{r}
#| label: renv-init-02.png
#| echo: false
#| out.width: 90%
#| fig.align: center
knitr::include_graphics("img/renv-init-02.png")
```
:::

::::

---

## Your Turn 1

```{r}
#| label: renv-init-03.png
#| echo: false
#| out.height: 100%
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/renv-init-03.png")
```

---

## Your Turn 1

```{r}
#| label: renv-lock.png
#| echo: false
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/renv-lock.png")
```

---

## Your Turn 1

```{r}
#| label: renv-lock-expl.png
#| echo: false
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/renv-lock-expl.png")
```

---

# How `renv` stores packages

--

<br/>

```{r}
#| label: renv-init-pkgs-01.png
#| echo: false
#| out.width: 50%
#| fig.align: center
knitr::include_graphics("img/renv-init-pkgs-01.png")
```

---

# `renv::status()`
<br/>

```{r}
#| label: renv-status-01.png
#| echo: false
#| out.width: 90%
#| fig.align: center
knitr::include_graphics("img/renv-status-01.png")
```

<br/>
--

### Checks for differences between the *`renv.lock`* and the *current project's packages*

---

# *`renv::snapshot()`*

<br/>

```{r}
#| label: renv-snapshot-01.png
#| echo: false
#| out.width: 60%
#| fig.align: center
knitr::include_graphics("img/renv-snapshot-01.png")
```

---

## Your Turn 2

### In `plot.R`, modify your code to load the `patchwork` library, then replace your previous plot with `quickplot(mpg$displ) + quickplot(as.factor(mpg$cyl))`
### Run `renv::status()` in the console
### Run `renv::snapshot()`. What's changed?

---

## Your Turn 2

:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: plot-dot-r-03.png
#| echo: false
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/plot-dot-r-file-03.png")
```
:::

::: {.column width="50%"}
::: {.fragment}
```{r}
#| label: plot-dot-r-04.png
#| echo: false
#| fig.align: center
knitr::include_graphics("img/plot-dot-r-file-04.png")
```
:::
:::

::::

---

## Your Turn 2

```{r}
#| label: renv-status-02.png
#| echo: false
#| fig.align: center
knitr::include_graphics("img/renv-status-02.png")
```

---


## Your Turn 2

```{r}
#| label: renv-snapshot-02.png
#| echo: false
#| out.width: 85%
#| fig.align: center
knitr::include_graphics("img/renv-snapshot-02.png")
```

--

```{r}
#| label: renv-snapshot-03.png
#| echo: false
#| out.width: 85%
#| fig.align: center
knitr::include_graphics("img/renv-snapshot-03.png")
```


## renv workflow {.dark-slide}

1. Create a project
2. `renv::init()`
3. Write code
4. `renv::snapshot()`
5. Iterate

## Restoring project states {.dark-slide}

1. Copy project
2. `renv::restore()`
3. That's it!

---

## Using renv with targets

--

## targets encourages *`tar_option_set(packages = "...")`*

---

## Using renv with targets
## ~~targets encourages `tar_option_set(packages = "...")`~~
## `tar_option_set()` is *efficient* but *works differently* than other ways of loading packages

---

## Using renv with targets

## ~~`library(`~~**`ggplot2`**~~`)`~~
## **`targets`**~~`::tar_target()`~~
## ~~`require(`~~**`dplyr`**~~`)`~~
## ~~`requireNamespace("`~~**`devtools`**~~`")`~~

. . .

## Recent updates to renv also support **`tar_option_set()`**!

---

## Using renv with targets
## *`tar_renv()`* 

. . .

## Still helpful with recent updates because of interactive and suggested packages

---

### Your Turn 3

.large[
####  Create a new project
#### Load targets and run `tar_script()` in the console. Read `_targets.R` and predict what your dependencies are.
#### Run `renv::dependencies()`
#### Run `tar_renv()` and look at `_targets_packages.R` What did targets do here? Why is that important? Run `renv::dependencies()` again and confirm that we can detect all of our dependencies.
#### Run `renv::init()`
]

---


### Your Turn 3

```{r}
#| label: my-newest-project
#| echo: false
knitr::include_graphics("img/my-newest-project.png")
```

---

## Your Turn 3

### `tar_script()`: *`_targets.R`*

.small[
```{r}
#| eval: false
library(targets)
# This is an example _targets.R file. Every {targets} pipeline
# needs one. Use tar_script() to create _targets.R and
# tar_edit() to open it again for editing. Then, run tar_make()
# to run the pipeline and tar_read(summary) to view the results.
# Define custom functions and other global objects. This is where
# you write source(\"R/functions.R\") if you keep your functions
# in external scripts.
summ <- function(dataset) {
  summarize(dataset, mean_x = mean(x))
}
# Set target-specific options such as packages.
tar_option_set(packages = "dplyr")
# End this file with a list of target objects.
list(
  tar_target(data, data.frame(
    x = sample.int(100),
    y = sample.int(100))),
  # Call your custom functions as needed.
  tar_target(summary, summ(data))
)
```
]

---

## Your Turn 3

```{r}
#| label: renv-dependencies-02.png
#| echo: false
knitr::include_graphics("img/renv-dependencies-02.png")
```

---

## Your Turn 3

:::: {.columns}

::: {.column width="50%"}
### `tar_renv()`

```{r}
#| label: tar-renv.png
#| echo: false
knitr::include_graphics("img/tar-renv.png")
```
:::

::: {.column width="50%"}
::: {.fragment}
### `_targets_packages.R`

```{r}
#| label: targets-packages.png
#| echo: false
knitr::include_graphics("img/targets-packages.png")
```
:::
:::

::::

---

## Your Turn 3

```{r}
#| label: renv-dependencies-03.png
#| echo: false
knitr::include_graphics("img/renv-dependencies-03.png")
```

---

## Your Turn 3

```{r}
#| label: renv-init-04.png
#| echo: false
knitr::include_graphics("img/renv-init-04.png")
```

---

## Your Turn 3

```{r}
#| label: renv-init-09.png
#| echo: false
#| out.width: 100%
#| fig.align: center
knitr::include_graphics("img/renv-init-09.png")
```

## Resources {.dark-slide}
## [renv: Getting started](https://rstudio.github.io/renv/articles/renv.html): A brief introduction to renv and its workflows
## [renv: Project Environments for R (blog)](https://blog.rstudio.com/2019/11/06/renv-project-environments-for-r/): An RStudio blog post introducing renv
## [renv: Project Environments for R (talk)](https://www.rstudio.com/resources/rstudioconf-2020/renv-project-environments-for-r/): A talk on renv from rstudio::conf() 2020 
