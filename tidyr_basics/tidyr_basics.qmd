---
title: "Tidying Data"
subtitle: "tidyr"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6,
  tibble.width = 60
)
library(tidyverse)
```

## **tidyr**

<!--
TODO: Update the art slide when Allison makes a pivot version
```{r}
#| out.height: 70%
#| out.width: 70%
#| echo: false
knitr::include_graphics("img/tidyr_spread_gather.png")
```
::: {style="text-align: right;"}
Art by Allison Horst
:::
-->


![](img/tidyr.png){.absolute top=0 right=0 width=140}

:::{.large}
Functions for tidying data.

What is tidy data?
:::

. . .

:::{.extra-large}
> ‚ÄúTidy datasets are all alike, but every messy dataset is messy in its own way.‚Äù ‚Äî Hadley Wickham
:::

## Tidy Data {.large}

![](http://garrettgman.github.io/images/tidy-1.png)

. . .

Each **column** is a single *variable*

. . .

Each **row** is a single *observation*

. . .

Each **cell** is a *value*

## `pivot_longer()`

```{r}
#| eval: false
pivot_longer(<DATA>, <NAMES TO>, <VALUES TO>, <VARIABLES>)
```

## Lord of the Rings

```{r}
#| label: lotr
lotr <- tribble(
                         ~film,    ~race, ~female, ~male,
  "The Fellowship Of The Ring",    "Elf",   1229L,  971L,
  "The Fellowship Of The Ring", "Hobbit",     14L, 3644L,
  "The Fellowship Of The Ring",    "Man",      0L, 1995L,
              "The Two Towers",    "Elf",    331L,  513L,
              "The Two Towers", "Hobbit",      0L, 2463L,
              "The Two Towers",    "Man",    401L, 3589L,
      "The Return Of The King",    "Elf",    183L,  510L,
      "The Return Of The King", "Hobbit",      2L, 2673L,
      "The Return Of The King",    "Man",    268L, 2459L
)
```

## Lord of the Rings

```{r}
lotr
```

---

```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_lotr.png")
```

## `pivot_longer()`

```{r}
#| code-line-numbers: "|2-6"
#| output-location: slide
lotr |>
  pivot_longer(
    names_to = "sex",
    values_to = "words",
    cols = female:male
  )
```

---

```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_tidyr.png")
```

## *Your Turn 1*


### Use `pivot_longer()` to reorganize `table4a` into three columns: `country`, `year`, and `cases`.

## *Your Turn 1*

```{r}
table4a |>
  pivot_longer(
    names_to = "year",
    values_to = "cases",
    cols = -country
  )
```

## `pivot_wider()`

```{r}
#| eval: false
pivot_wider(<DATA>, <NAMES FROM>, <VALUES FROM>)
```

```{r}
#| label: tidyr-longer-wider
#| out.width: 65%
#| echo: false
knitr::include_graphics("img/tidyr-longer-wider.gif")
```

Animation by Mara Averick

## `pivot_wider()`

```{r}
#| code-line-numbers: "|2-6|7-10"
#| output-location: fragment
lotr |>
  pivot_longer(
    names_to = "sex",
    values_to = "words",
    cols = female:male
  ) |>
  pivot_wider(
    names_from = race,
    values_from = words
  )
```

## *Your Turn 2* {.small}

### Use `pivot_wider()` to reorganize `table2` into four columns: `country`, `year`, `cases`, and `population.`
### Create a new variable called `prevalence` that divides `cases` by `population` multiplied by 100000.
###  Pass the data frame to a ggplot. Make a scatter plot with `year` on the x axis and `prevalence` on the y axis. Set the color aesthetic (`aes()`) to `country`. Use `size = 2` for the points. Add a line geom.

```{r}
#| eval: false
table2
```

## *Your Turn 2*

```{r}
#| code-line-numbers: "3-4,6"
table2 |>
  pivot_wider(
    names_from = type,
    values_from = count
  ) |>
  mutate(prevalence = (cases / population) * 100000)
```

## *Your Turn 2*

```{r}
#| code-line-numbers: "7-10"
#| output-location: slide
table2 |>
  pivot_wider(
    names_from = type,
    values_from = count
  ) |>
  mutate(prevalence = (cases / population) * 100000) |>
  ggplot(aes(x = year, y = prevalence, color = country)) +
  geom_point(size = 2) +
  geom_line() +
  scale_x_continuous(breaks = c(1999L, 2000L))
```

## *Your Turn 3*

### Pivot the 5th through 60th columns of `who` so that the names of the columns go into a new variable called `codes` and the values go into a new variable called `n`. Then select just the `country`, `year`, `codes` and `n` variables.

```{r}
#| eval: false
who
```

## *Your Turn 3*

```{r}
#| code-line-numbers: "3-5"
#| output-location: slide
who |>
  pivot_longer(
    names_to = "codes",
    values_to = "n",
    cols = 5:60
  ) |>
  select(country, year, codes, n)
```

## `separate()`/`unite()`

```{r}
#| eval: false
separate(
  <DATA>,
  <VARIABLE>,
  into = c("<VARIABLE1>", "<VARIABLE2>")
)

unite(<DATA>, <VARIABLES>)
```

## *Your Turn 4*

### Use the `cases` data below. Separate the `sex_age` column into `sex` and `age` columns.

```{r}
#| eval: false
cases <- tribble(
   ~id,     ~sex_age,
   "1",    "male_56",
   "2",  "female_77",
   "3",  "female_49"
)
separate(_______, _______, into = c("_______", "_______"))
```

## *Your Turn 4*

```{r}
#| code-line-numbers: "7"
#| output-location: fragment
cases <- tribble(
   ~id,     ~sex_age,
   "1",    "male_56",
   "2",  "female_77",
   "3",  "female_49"
)
separate(cases, sex_age, into = c("sex", "age"))
```

## *Your Turn 4*

```{r}
#| code-line-numbers: "7-12|11"
#| output-location: fragment
cases <- tribble(
   ~id,     ~sex_age,
   "1",    "male_56",
   "2",  "female_77",
   "3",  "female_49"
)
separate(
  cases,
  sex_age,
  into = c("sex", "age"),
  convert = TRUE
)
```

## *Your Turn 5: Challenge!* {.small}

### There are two CSV files in this folder containing SEER data in breast cancer incidence in white and black women. For both sets of data:

### Import the data
### Pivot the columns into 2 new columns called `year` and `incidence`
### Add a new variable called `race`. Remember that each data set corresponds to a single race.
### Bind the data sets together using `bind_rows()` from the dplyr package. Either save it as a new object or pipe the result directly into the ggplot2 code.
### Plot the data using the code below. Fill in the blanks to have `year` on the x-axis, `incidence` on the y-axis, and `race` as the color aesthetic.

## *Your Turn 5: No solution* üòà

```{r}
#| echo: false
#| fig.width: 6.0
#| fig.height: 3.5
#| dpi: 320.0
breast_ca_black <- read_csv("breast_ca_black.csv")
breast_ca_white <- read_csv("breast_ca_white.csv")
breast_ca_black <- breast_ca_black |>
  pivot_longer(
    names_to = "year",
    values_to = "incidence",
    cols = everything()
  ) |>
  mutate(race = "black")

breast_ca_white <- breast_ca_white |>
  pivot_longer(
    names_to = "year",
    values_to = "incidence",
    cols = everything()
  ) |>
  mutate(race = "white")

breast_ca <- bind_rows(breast_ca_black, breast_ca_white)

breast_ca |>
  ggplot(aes(x = year, y = incidence, color = race, group = race)) +
  geom_point() +
  geom_line() +
  scale_x_discrete(breaks = seq(1975, 2011, by = 5)) # show years by fives
```

## Other neat tidyr tools
### Uncounting frequency tables

```{r}
#| code-line-numbers: "|7"
#| output-location: slide
lotr |>
  pivot_longer(
    names_to = "sex",
    values_to = "count",
    cols = c(female, male)
  ) |>
  uncount(count)
```

## Other neat tidyr tools
### *Work with data frames*
#### `crossing()` and `expand()`
#### `nest()` and `unnest()`

## Other neat tidyr tools
### *Work with missing data*
#### `complete()`
#### `drop_na()` and `replace_na()`

## Resources {background-color="#23373B"}
### [R for Data Science](https://r4ds.hadley.nz/): A comprehensive but friendly introduction to the tidyverse. Free online.
### [Posit Recipes](https://posit.cloud/learn/recipes): Common code patterns in R (with some comparisons to SAS)
