---
title: "Functional programming"
format:
  html:
    df-print: paged
---

```{r}
#| label: setup
library(tidyverse)
library(gapminder)
diabetes <- read_csv("diabetes.csv")
```

## Your Turn 1

Here is a list:

```{r}
#| label: YT-00-create-measurement-list
measurements <- list(
  blood_glucose = rnorm(10, mean = 140, sd = 10), 
  age = rnorm(5, mean = 40, sd = 5), 
  heartrate = rnorm(20, mean = 80, sd = 15)
)

measurements
```

There are two ways to subset lists: dollar signs and brackets. Try to subset `blood_glucose` from `measurements` using these approaches. Are they different? What about `measurements[["blood_glucose"]]`?

```{r}
#| label: YT-subset-brackets
measurements["blood_glucose"]
```

```{r}
#| label: YT-subset-dollar-sign
measurements$blood_glucose
```

## Your Turn 2

### Use `starts_with()` from `tidyselect()` to calculate the average `bp` columns in `diabetes`, grouped by `gender`. Give the new columns the name pattern `column_function`, e.g. `bp.1s_mean` (hint: `{.fn}` will give you the function name, and `{.col}` will give you the column name)

```{r}
diabetes |> 
  group_by(______) |> 
  summarise(across(
    starts_with("__"), 
    list(____ = mean), 
    na.rm = TRUE, 
    .names = "_______")
  )
```


## Your Turn 3

1. Read the code in the first chunk and predict what will happen.
2. Run the code in the first chunk. What does it return?

```{r}
list(
  blood_glucose = sum(measurements$blood_glucose),
  age = sum(measurements$age),
  heartrate = sum(measurements$heartrate)
)
```

3. Now, use `map()` to create the same output.

```{r}
map(measurements, ___)
```

## Your Turn 4

Pass diabetes to `map()` and map using `class()`. What are these results telling you?

```{r}

```

## Your Turn 5

Write a function that returns the mean and standard deviation of a numeric vector.
1. Give the function a name
2. Find the mean and SD of `x`
3. Map your function to `measurements`

```{r}
_______ <- function(x) {
  x_mean <- _______
  x_sd <- _______
  tibble(mean = x_mean, sd = x_sd)
}
```

## Your Turn 6

Do the same as #4 above but return a vector instead of a list. 

```{r}

```


## Your Turn 7

Check `diabetes` for any missing data. 

1. Using the `\(.x) .f(.x)` shorthand, check each column for any missing values using `is.na()` and `any()`

2. Return a logical vector. Are any columns missing data? What happens if you don't include `any()`? Why?

3. Try counting the number of missing, returning an integer vector

```{r}

```

## Your Turn 8

1. Fill in the model_lm function to model chol (the outcome) with ratio and pass the .data argument to lm()

2. Group `diabetes` by `location`

3. Use `group_modify()` with `model_lm`

```{r}
library(broom)
model_lm <- function(.data, ...) {
  mdl <- lm(____, data = ____)
  # get model statistics
  glance(mdl)
}

diabetes |> 
  ________ |> 
  ________
```

## Your Turn 9

1. Split the `gapminder` dataset into a list by `country` using the `split()` function

2. Create a list of models using `map()`. For the first argument, pass gapminder_countries. For the second, use the `\()` notation to write a model with `lm()`. Use `lifeExp` on the left hand side of the formula and `year` on the second. Pass `.x` to the data argument.

3. Use `map2()` to take the models list and the data set list and map them to `predict()`. Since we're not adding new arguments, you don't need to use `\()`.

```{r}
gapminder_countries <- ____(gapminder, gapminder$country)
models <- map(________, ~ ________)
preds <- map2(________, ________, ________)

# Look at the first six elements of the list 
head(preds)
```

By the way, we can also solve this problem with `group_map()` since `lm()` stores the data used in a given regression model:

```{r}
gapminder |> 
  group_by(country) |> 
  group_map(\(.x, ...) lm(lifeExp ~ year, data = .x)) |>
  map(predict)
```

Both solutions are fine in this case, but it's useful to know both strategies more generally!

## Your turn 10

1. Create a new directory using the fs package. Call it "figures".

```{r}
library(fs)
dir_create(_______)
```

2. Write a function to plot a line plot of a given variable in gapminder over time, faceted by continent. Then, save the plot (how do you save a ggplot?). For the file name, paste together the folder, name of the variable, and extension so it follows the pattern `"folder/variable_name.png"`
3. Create a character vector that has the three variables we'll plot: "lifeExp", "pop", and "gdpPercap".
4. Use `walk()` to save a plot for each of the variables

```{r}
ggsave_gapminder <- ________(variable) {
  # this allows us to accept both bare names and characters
  variable <- rlang::ensym(variable)
  
  #  don't forget to use the curly-curly syntax!
  p <- ggplot(gapminder, aes(x = year, y = ____, color = country)) + 
    _________() + 
    scale_color_manual(values = country_colors) + 
    facet_wrap(~ ________)) + 
    theme(legend.position = "none")
    
  ______(filename = paste0("____", ____, ".png"), plot = p, dpi = 320)
}

vars <- __________

______(_______, ________)
```


## Your Turn 11: Bonus!

Finish the exercises early? Try this bonus exercise to work with nested columns

Do the same as #9, but use a nested data frame.
1. Create a nested data frame. What does it look like?
2. Use `map()` in `dplyr::mutate()` to map `data` to `model_lm`. 
3. What does `nested_glance` look like?
4. Unnest the data

When might nesting be useful?

```{r}
diabetes_nested <- diabetes |> 
  group_by(location) |> 
  nest()

nested_glance <- diabetes_nested |> 
  mutate(glance = ___________)
  
unnest(_______, glance)
```
